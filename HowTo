Description - clean architecture, clean code

add dependencies:
Project Gradel - classpath Dagger-hilt
and plugins - kotlin n all
remember to use a task clean for rootProject.buildDir

Module:App Gradle - 
kapt and hilt plugins
manage java versiona nd jvm target to 17(matching them to kotlin version)

added some colors in Color.kt within the theme package

create WeatherType.kt in Domain > Weather >
has references to different types of weather, basis the codes from the API
also assign a drawable resource in line with the weatherType

Define a Resource.kt file for success and error in Domain  > Util
helps distinguish between Sucess and Error - more later!

Lets setup the API
Presentation - views, VM
Domain - innermost layer - core behavior, biz logic. should not know about other layers - no API,. no database.
Data - interacts with data sources like localDB, API.

so let's create a data > remote package > WeatherApi interface
define a coroutine (sus fun) to get user location first - @Query in retrofit that define latitude and longitude
specify @GET endpoint
the sus fun should return something from the API, that would be your DTO
converts json response form API to android data

define WeatherDTO data class
ideally, the variable name should be the same as the JSON file i.e. "hourly," but since we are changing it a desired name, we annotate
@field:Json(name="hourly")  ----  because API response is an array of HOURLY data
since we are mostly interested in hourly data, we try to catch that data in our DTO data class
we are renaming "houly" to "weatherData" variable name

now define WeatherDataDto data class, which will have all the weather data in the blocks, I mean the data 
annotate all fields from json to local variables for easy display, they are variables inside the hourly block
EXCEPT for - longitude latitude data

go back to WeatherApi and change return for the sus fun to WeatherDTO

Now, API has been created, now we work on building Domain to keep architecture clean

innermost layer that knows nothing about implementation tools like retrofit or ktro, etc

Wether DTO objs we created already contain implementation details of API, hence they con not be directly used
e.g. WeatherDataDto uses moshi.json (in imports)

So we need to use Mappers at the Data level - they take data from DTO obj and map them to objects that lye on the domain layer. Such objs on domain layer do not carry any implementation

domain layer should not know about it- BECAUSE - if you wish to change implementation details. e.g. use ktor instead of retrofit. or change db.  so such changes at data layer will affect the domain layer, which should stay aloof of any such changes
Core logic/foundation of your app shuld remain same and not affected by changes in data layer.

Domain models are objs or classes that are easy to change. rather than DTO that are difficult to code because they carry actual data in Lists.

checkout the WeatherType.kt file in domain package. it is pretty straight forward and readable as you can check it and know what kind of weather there is

create a new class WeatherInfo in domain > weather
it has list of weather data figures per day basis. i.e. during those 24 hours
the variable weatherDataPerDay maps an integer value (current day index) to list of WeatherData list for that day i.e. list of type WeatherdataClass
the list will have hourly data for the day.e.g today index '0' will show full day data temp, humidity, etc.
and tomorrow index '1' will show tomorrow full day data - FUTURE
and variable currentWeatherData will show today current hour's data - PRESENT
although the current hour data is already in the mapped list, but we create a separate variable for it.


you can have Domain > Models for scalability, but here we are sticking to domain > Weather

Lets create the data class WeatherdataClass which has different variables. time should be LocalDateTime java

a WeatherDataClass obj would be much easier to deal with
The DTOs (WeatherdataDto) had a lot of lists to work with. As we define Domain objects we have brought the lists to more manageable data

we parse the data in our mapper once and then deal with the WeatherdataObjects that carry values

Let's create Mappers inside Data > Mapper> WeatherMapper.kt
they are in data layer instead of domain layer as they need to be allowed to interact with DTOs
inside WeatherMapper.kt:

The first fun should be that one that maps the WeatherDataDto to WeatherDataMap()
this MAP is the MAP we mentioned inside the WeatherInfo.kt file previously
so we MAP the Day number to the List of data i.e. 24 entries
this Map fun will transform WeatherDataDto into a MAP
return List of Time String values i.e. for each hour in this format "2022-06-26T00:00"
we use mapIndexed where an index value is mapped to String,(time String)
"->" matlab "to" WeatherData objects
mapping values as follows: val temperature = temperatures at the index of index - thereby generating references to single values
since all of these lists (temp, weatherCode, humidity, etc) have the same length we use the same index for all
now, we map all these to a WeatherDataClass object ()
time will be parsed with localDateTime using ISO DateTimeFormatter
now here as you see, all the variables in the WeatherDataClass are being mapped to time and other variables
we pass the weatherCode into the WeatherType first and then map it to weathertype in the WeatherDataClass obj

So now, time values have been mapped to other values
but we still do not have the map that maps the day index to weatherDataList

this is where we bring in the groupBy feature in maps. where we map that returns a list of any type "K" mapped to List<WeatherData>
with the statement it.time.dayOfMonth we are mapping the day of the month to the Weatherdata

But this is only for index day 0, i.e. today. if we need to show forecast in the app, we will have to add values to the index to dispaly future day weather, e.g. index + 5 for 5th day data
It makes sense to have a MAP that has 7 keys for next 7-day forecast display i.e. 0 to 6

But the prob is that the "keys" in map do not have an index like other lists
we simply can not do .mapKeys { it.index} - illegal syntax

So the index value in the return statement for fun WeatherDataDto.toWeatherDataMap() will have 24 * 7 values. i.e. 24-hours for each fo the next 7 days of week
check the JSON from API, it carried 24 String values for today's time and each for next 7 days

Lets use this, create a data class IndexedWeatherdata, a temporary class to forward the index parameters

Lets go back to our map fun and replace the mapping from WeatherDataClass to IndexedWeatherData
where index = current index
and in groupBy, we change it. index divided by 24
and further mapValues{ it.value.map {it.data}  - mapping the values to the normal weatherdataClass - we know data is the WeatherDataClass as specifie din the private data class above

now the next fun will map WeatherDto (hourly data) to WeatherInfo currentWeather and DataPerDay(which now already has data populated from previous fun)
it returns the WeatherInfo
variable CurrentWeatherData will carry index of '0' for today it futher fnds the weather data for current hour by using FIND
now to find the time right now, we user hour variable that checks whether now.minute is less than 30 (half hour)

CAN EXTEND THE FORECAST FOR A WEEK LATER

Next, we define a domain > repository > WeatherRepository interface - it combines the data sources
Repository should always be abstracted out with an interface to be able to add to Domain
Reason to abstract out i.e. create interface - it becomes easy to swap out implemntation details, if we later decide to use a different API, retrofit to ktor, etc.
Not all classes should depend on the interface.
within the WeatherRepository start creating sus funs that getData from Repo (local or remote)
the sus fun getweatherData returns a Resource of type WeatherInfo - weatherPerDay or CurrentWeather, so that the result from API can be transferred to next layer i.e. the VM

now we draft a WeatherRepo Implementation in data > repository > WeatherRepositoryImpl
it implements the WeatherRepository interface and then you implement members
Now we also need access to API (i.e. WeatherApi) so instantiate it inside constructor
as now dagger Hilt is coming into play, use the annotation @Inject

if dagger knows how to get this Api, it can create the instance for repo. Later on that

We use a TRY-CATCH to check the return for errors. The return is basically fetching the location data, which is then mapped to WeatherInfo
TRY block returns either Success or Error depending on sealed Resources class that has 2 sub classes

Location tracking is data-related, so we will have abstraction using a location tracker interface.
So we will have Location packages (based on their context) within the domain as well as data packages. Domain ones will have abstraction (locationTracker interface) while data will fetch its data
lets start with domain > location > LocationTracker
that has a getCurrentLocation fun that runs as coroutine and returns a Location
you need location permissions enabled. uses - coarse and fine location

create data > location > DefaultLocationTracker , it implements LocationTracker interface - implement members
now we figure what variables we need or what objs we need to instantiate in the constructor:
we define locationClient which is a FusedLocationProviderClient
so how do we get location and how do we do it with coroutines?
getCurrLocation uses the following:
checks fine location permission - ContextCompat.checkSelfPermission(app, Manifest.perm.Finelocation)
checks coarse location permission - 
uses locationManager - uses a reference to LocationManager (System Service) from Android Framework - 
isGpsEnabled - checks if locationManager has provider enabled from the cell Network or using GPS
if we not have access, return null or an error message. else we start retrieving the location
we do that using a suspendCancellableCoroutine using a continuation variable
convert a callback to a suspending coroutine
retrieve the location using locationClient and get the lastLocation and Apply that gives us a TASK
which we use to listen for successful result, error or otherwise.
Since this ia s task,we use isComplete, isSuccessful and result from TASK funs
"resume" is from Continuation.kt - continuation after a SUSPENSION POINT
make sure to use the RESUME with single location
return@suspendCancellableCoroutine

this is how we transform the addOnSuccessListner callbacks into a coroutine - Failure or Canceled

so when we call get fun, it blocks the coroutine and works on location and then resumes/CONTINUATION of coroutine.

now we move on to DI part of project
create a di > AppModule object
annotate with @Module and @InstallIn(SingletonComponent::clasS) - as all dependencies will be Singletons
within it, we start with @Provides and @Singlton at beginning of fun that providesWeatherApi and returns a WeatherApi
and it returns a Retrofit Builder
now check in DefaultLocationTracker, it needs a FusedLocationProviderClient
so we continue to build another @Provides fun

build di> LocationModule
but in this case, we use @Binds instead of @Provides - as wewant to bind the defaultLocationTracker but is provided as an interface
So whenever we inject a LocationTracker, it will use an instance of defaultLT, it only works if we have a @Inject constructore here in DefaultLocationTracker class, and only works if dagger knows how o create these instances

next build a RepositorModule.kt with abstract fun bindWeatherRepository that carries an abtraction of WeatherRepository

Now, dagger needs an Application class, so we build a WeatherApp.kt in the root folder
remember to add this application class into the Manifest as android:name=".AppName"

Hilt dependency injection is done!

Since this is Clean Architecture, we now work on ViewModel - interacts with Domain Layer. So ideally the Ui should take values from state and UI components and only focus on displaying the values.

build presentation > WeatherState data class with params - weatherInfo which will be initiated as null, because we need to retrieve data first

create a new VM file - presentation > WeatherVM
make it a @HiltVM so that we can easily inject dependencies inside the VM
Define the @Inject constructor declaration and pass the variables for repo and location
start with an instance of State i.e. WeatherState and mark it private set so that only VM can change the state values

fun loadWeatherInfo will call the API and get the location and combine it with the state
call the classes from domain layer and mao the results - which happens in a coroutine
first set the state to Loading - state = state.copy(WHATEVER YOU WANT TO SET)
and we reset the error value to null
now start to retrieve the location
if the location is not null, the LET {} - this helps us t make call to API to get data basis the location
so, when Resource.Success then weatherInfo will be the data from result(API call), Loading is FALSE, error is null
but when, Resource.Error, then weatherInfo goes null, isL:oading still remains FALSE, but error = result.message
So the state changes deneding on the result of API call
now if we do not get the results from location query, we run a KOTLIN  block

Let's build the UI!
start by making a WeatherCard.kt file which will contain the weather info for current day
Also, need to insert a check that we show Weather info only when the STATE is not null
Text which carries current time
followed by the Image from WeatherType
TextStyle to be able to change Color

sewing all up into ManActivity - remember to annotate with @AndroidEntryPoint
define variables like VM, and launcherPermissions
ActivityResultLauncher of type Array of type String
ARL is a launcher for a previously-prepared call to start the process of executing an ActivityResultContract
ARC is a contract specifying that an activity can be called with an input of type I and produce an output of type O.

so we define the variable permissionLauncher of type ActivityResultLauncher of type Array of type Strings
So, inside onCreate, we mention permissionLauncher = registerForActivityResult(), which inturn calls
ActivityResultContracts.RequestMultiplePermissions()
and as a callback we call viewModel.loadWeatherInfo()
now that weatherInfo has been loaded, we need permissionLauncher to launch array of Manifest permissions


To display the next 7-day forecast we need a lazyRow, defining it separately in a fun WeatherForecast()
specify all items(data) and get all the  weatherData details -> 

now we need a column with 3 items in it Time, weather icon and temp. Side-scrolling row items
we call it HourslyWeatherDisplay

In mainActivity

we want to show circular indiscator when viewModel.state isLoading
also check if VM.State.Error is not null











